{
	"nodes":[
		{"id":"00cd262f458a2b84","x":-109,"y":-1656,"width":1304,"height":188,"type":"text","text":"- Both leveraging the progress mechanism from OverlayTransitions + TransitionProgress\n- Both mapping the TransitionType to the default OverlayTransitions animator and getting it's interpolated value\n- Both are using that value to drive an animation\n\t- In Creation, these are view properties\n\t- in Export, these are matrix transformations"},
		{"id":"357ab91566f13f46","x":-99,"y":-1429,"width":1304,"height":188,"type":"text","text":"### Iterations\n- Add animators as part of TransitionType\n- Add functions / values that represent the View transformations and the Matrix transformations\n- Clean up Enter / Exit Transition modeling"},
		{"id":"2da03afcc46fb9d3","x":-1032,"y":-3733,"width":1563,"height":1995,"type":"text","text":"```kotlin\nfun View?.seekOverlayTransition(  \n    positionMs: Long,  \n    durationConfig: IdeaPinOverlayBlockDurationConfig,  \n    transitionConfig: OverlayTransitionConfig  \n) {  \n    if (this == null) return  \n  \n    when (  \n        val progress = OverlayTransitions.progress(  \n            currentTime = positionMs,  \n            startTime = durationConfig.startTimeMs,  \n            endTime = durationConfig.endTimeMs  \n        )  \n    ) {  \n        TransitionProgress.BeforeTransitions, TransitionProgress.AfterTransitions -> {  \n            hide()  \n            alpha = 1f  \n            translationX = 0f  \n            scaleX = 1f  \n        }  \n        TransitionProgress.BetweenTransitions -> {  \n            show()  \n            alpha = 1f  \n            translationX = 0f  \n            scaleX = 1f  \n        }  \n        is TransitionProgress.EnterTransitionRunning -> {  \n            show()  \n            when (transitionConfig.enter.type) {  \n                TransitionType.Instant -> {  \n                    alpha = 1f  \n                    translationX = 0f  \n                    scaleX = 1f  \n                }  \n                TransitionType.SlideIn -> {  \n                    with(OverlayTransitions.defaultSlideInAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        translationX = getAnimatedValue(View.TRANSLATION_X.name) as Float  \n                        alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                    }  \n                }  \n                TransitionType.FadeIn -> {  \n                    with(OverlayTransitions.defaultFadeInAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                    }  \n                }  \n                TransitionType.Expand -> {  \n                    with(OverlayTransitions.defaultExpandAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        scaleX = getAnimatedValue(View.SCALE_X.name) as Float  \n                    }  \n                }  \n                else -> {  \n                    throw IllegalStateException(\"Unsupported Enter Transition\")  \n                }  \n            }  \n        }  \n        is TransitionProgress.ExitTransitionRunning -> {  \n            show()  \n            when (transitionConfig.exit.type) {  \n                TransitionType.Instant -> {  \n                    alpha = 1f  \n                    translationX = 0f  \n                    scaleX = 1f  \n                }  \n                TransitionType.SlideOut -> {  \n                    with(OverlayTransitions.defaultSlideOutAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        translationX = getAnimatedValue(View.TRANSLATION_X.name) as Float  \n                        alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                    }  \n                }  \n                TransitionType.FadeOut -> {  \n                    with(OverlayTransitions.defaultFadeOutAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                    }  \n                }  \n                TransitionType.Shrink -> {  \n                    with(OverlayTransitions.defaultShrinkAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        scaleX = getAnimatedValue(View.SCALE_X.name) as Float  \n                    }  \n                }  \n                else -> {  \n                    throw IllegalStateException(\"Unsupported Exit Transition\")  \n                }  \n            }  \n        }  \n    }  \n}\n```"},
		{"id":"953d67617f25f5d6","x":586,"y":-3733,"width":1563,"height":1995,"type":"text","text":"```kotlin\nfun drawBitmapOverlay(textName: Int, presentationTimeUs: Long, config: IdeaPinVideoExportBitmapConfig?) {  \n    val startTimeUs = config?.startTimeUs ?: 0L  \n    val endTimeUs = config?.endTimeUs ?: 0L  \n    val isFullDuration = startTimeUs == 0L && endTimeUs == 0L  \n  \n    if (isFullDuration) {  \n        draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, 1f)  \n        return  \n    }  \n  \n    if (presentationTimeUs !in startTimeUs..endTimeUs) {  \n        return  \n    }  \n  \n    val enterTransition = (config?.enterTransition ?: TransitionType.Instant)  \n    val exitTransition = (config?.exitTransition ?: TransitionType.Instant)  \n    val animationDurationUs = OverlayTransitions.ANIMATION_DURATION_MS * MICROSECONDS_IN_ONE_MILLISECOND  \n    val progress = OverlayTransitions.progress(  \n        currentTime = presentationTimeUs,  \n        startTime = startTimeUs,  \n        endTime = endTimeUs,  \n        animationDuration = animationDurationUs  \n    )  \n  \n    when (progress) {  \n        is BeforeTransitions, AfterTransitions -> { /* do nothing */ }  \n        is EnterTransitionRunning -> {  \n            when (enterTransition) {  \n                TransitionType.Instant -> {  \n                    draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, 1f)  \n                }  \n                TransitionType.SlideIn -> {  \n                    with(OverlayTransitions.defaultSlideInAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val translationX = getAnimatedValue(View.TRANSLATION_X.name) as Float  \n                        val alpha = getAnimatedValue((View.ALPHA.name)) as Float  \n                        translateAndReset(translationX) {  \n                            draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, alpha)  \n                        }  \n                    }                }  \n                TransitionType.FadeIn -> {  \n                    with(OverlayTransitions.defaultFadeInAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                        draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, alpha)  \n                    }  \n                }  \n                TransitionType.Expand -> {  \n                    with(OverlayTransitions.defaultExpandAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val scaleX = getAnimatedValue(View.SCALE_X.name) as Float  \n                        scaleAndReset(scaleX) {  \n                            draw(textName, it, textureMatrix, 1f, presentationTimeUs, 1f)  \n                        }  \n                    }                }  \n                else -> {  \n                    throw IllegalStateException(\"Unsupported Enter Transition: $enterTransition\")  \n                }  \n            }  \n        }  \n        is ExitTransitionRunning -> {  \n            when (exitTransition) {  \n                TransitionType.Instant -> {  \n                    draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, 1f)  \n                }  \n                TransitionType.SlideOut -> {  \n                    with(OverlayTransitions.defaultSlideOutAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val translationX = getAnimatedValue(View.TRANSLATION_X.name) as Float  \n                        val alpha = getAnimatedValue((View.ALPHA.name)) as Float  \n                        translateAndReset(translationX) {  \n                            draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, alpha)  \n                        }  \n                    }                }  \n                TransitionType.FadeOut -> {  \n                    with(OverlayTransitions.defaultFadeOutAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val alpha = getAnimatedValue(View.ALPHA.name) as Float  \n                        draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, alpha)  \n                    }  \n                }  \n                TransitionType.Shrink -> {  \n                    with(OverlayTransitions.defaultShrinkAnimator) {  \n                        setCurrentFraction(progress.percent)  \n                        val scaleX = getAnimatedValue(View.SCALE_X.name) as Float  \n                        scaleAndReset(scaleX) {  \n                            draw(textName, it, textureMatrix, 1f, presentationTimeUs, 1f)  \n                        }  \n                    }                }  \n                else -> {  \n                    throw IllegalStateException(\"Unsupported Exit Transition\")  \n                }  \n            }  \n        }  \n        else -> {  \n            draw(textName, mvpMatrix, textureMatrix, 1f, presentationTimeUs, 1f)  \n        }  \n    }  \n}\n```\n"},
		{"id":"0eec6ba88a8459d4","x":3967,"y":-999,"width":677,"height":300,"color":"6","type":"text","text":"### Expand Transition\n- Add TransitionType.Expand\n- Create Wrapper Type OvlerayTransition.ExpandTransition\n- Add a new animator to OverlayTransitions\n\t- This part is not obvious\n\t- Right now the animator modifies scale x, this part is just assumed when using this animator in creation and export\n- Handle new TransitionType in IdeaPinTransitionExtensions\n- Handle new TransitionType in GlDrawer.drawBitmapOverlay()"},
		{"id":"2d328575c915bdf4","x":316,"y":248,"width":486,"height":71,"color":"4","type":"text","text":"# Adding a new Sticker"},
		{"id":"457c70b556033d0e","x":174,"y":401,"width":713,"height":63,"color":"4","type":"text","text":"Update `TransitionType` with new Enter/Exit transition you want to implement"},
		{"id":"44d31f8930b03209","x":4173,"y":-637,"width":277,"height":75,"color":"6","type":"text","text":"# Dump\n"},
		{"id":"843ee888a63253ce","x":3455,"y":-636,"width":559,"height":370,"color":"6","type":"text","text":"### Creation\n- OverlayTransition\n- OverlayTransitionConfig\n- ENTER_TRANSITIONS\n- EXIT_TRANSITIONS\n- TransitionSelectionModal\n- TransitionSelectionModalState\n- IdeaPinOverlayBlockDurationConfig\n- IdeaPinEditiableFullBleedPageView\n- IdeaPinEditablePageLite\n- IdeaPinOverlayDurationFragment/Presenter\n- IdeaPinTransitionExtensions\n"},
		{"id":"e7618e1e7481be5e","x":4644,"y":-636,"width":559,"height":148,"color":"6","type":"text","text":"### Common\nTransitionType\nOverlayTransitions\nTransitionProgress"},
		{"id":"5885a4b3974f7b48","x":174,"y":504,"width":713,"height":60,"color":"4","type":"text","text":"Update `OverlayTransitions` to create `ValueAnimators` for those new transitions"},
		{"id":"ae9921263c75f722","x":174,"y":604,"width":713,"height":60,"color":"4","type":"text","text":"Update `IdeaPinOverlayDurationContract` with new `OverlayTransition` wrapper types for each new `TransitionType` enum"},
		{"id":"79795b308f09b6e6","x":174,"y":704,"width":713,"height":60,"color":"4","type":"text","text":"Update strings.xml with new labels for each new `TransitionType` added"},
		{"id":"9ff128293889fccd","x":174,"y":804,"width":713,"height":60,"color":"4","type":"text","text":"Update `IdeaPinOverlayDurationContract` constants `OVERLAY_ENTER_TRANSITIONS` and `OVERLAY_EXIT_TRANSITIONS` with the new `OverlayTransition` types added"},
		{"id":"2261fb882e2bc5a4","x":174,"y":1104,"width":713,"height":91,"color":"4","type":"text","text":"Update `GlDrawer.drawBitmapOverlay` to support the new Animation. Depending on the properties your animation changes, you may need to add matrix transformation functions or update the alpha value that we pass to the `draw` function."},
		{"id":"f52c78567ea22c1d","x":174,"y":904,"width":713,"height":60,"color":"4","type":"text","text":"Update `IdeaPinTransitionSelectionModalView`  add a new button in the layout, inflate it and add it to the `transitionOptions` list so that it will be displayed + bound."},
		{"id":"6c11452d9fe182b7","x":174,"y":1004,"width":713,"height":60,"color":"4","type":"text","text":"Update `IdeaPinTransitionExtensions` to support new transitions for Creation"},
		{"id":"09176f6c62632fc1","x":4074,"y":-497,"width":530,"height":370,"color":"6","type":"text","text":"### Export\n- GlDrawer.drawBitmapOverlay\n- DecoderSurface\n- AsyncDecoderSurface\n- IdeaPinVideoExportBitmapConfig\n- Matrix Transformations / Shader Variables"},
		{"id":"4b5ac297baa29d94","x":4722,"y":-402,"width":692,"height":514,"color":"6","type":"text","text":"### Enter vs Exit Transitions\n---\nThere is some confusion around the delineation between enter + exit transitions\n\nIt also makes the progress a little awkward when certain transition don't care about most of the progress states\n\n`OverlayTransitionConfig` has both enter + exit transitions\n`IdeaPinOverlayBlockDurationConfig` does too\n`IdeaPinVideoExportBitmapConfig` does too"},
		{"id":"c3a7be10aecc6dcd","x":3470,"y":-182,"width":485,"height":129,"color":"6","type":"text","text":"### Serialization Issue\nTransitionType enum is kinda complex and non-serialization friendly"},
		{"id":"14fbdded7eb7e8d1","x":288,"y":1492,"width":486,"height":71,"color":"3","type":"text","text":"# Ideas for Improvement"},
		{"id":"57e7d15cdd8019cb","x":-363,"y":1664,"width":711,"height":305,"color":"3","type":"text","text":"### Compile Time Errors\n---\nWhen adding a new `TransitionType` there should be compile time errors that make sure you are handling that new type wherever necessary. This comes for free with when statements, but right now because we combine Enter + Exit transitions we have else statments which are catchall. \n\nWe can try and seperate these out, maybe make an interface and then two sets of enums / sealed classes?\n"},
		{"id":"b5c38338fd98eb9a","x":4626,"y":416,"width":1012,"height":491,"type":"text","text":"### OverlayTransition Wrapper\n```kotlin\nsealed class EnterOverlayTransition(override val label: Int, val type: EnterTransition) : OverlayTransition {  \n    object InstantTransition : EnterOverlayTransition(  \n        label = R.string.idea_pin_overlay_transition_type_instant,  \n        type = EnterTransitionType.Instant  \n    )  \n    object SlideInTransition : EnterOverlayTransition(  \n        label = R.string.idea_pin_overlay_transition_type_slide_in,  \n        type = EnterTransitionType.SlideIn  \n    )  \n    object FadeInTransition : EnterOverlayTransition(  \n        label = R.string.idea_pin_overlay_transition_type_fade_in,  \n        type = EnterTransitionType.FadeIn  \n    )  \n    object ExpandTransition : EnterOverlayTransition(  \n        label = R.string.idea_pin_overlay_transition_type_expand,  \n        type = EnterTransitionType.Expand  \n    )  \n}\n```"},
		{"id":"c94b1f525d3b1068","x":3633,"y":416,"width":934,"height":560,"type":"text","text":"### TransitionType Enum\n```kotlin\nenum class EnterTransitionType : EnterTransition {  \n    Instant {  \n        override val animator = animation()  \n  \n        override fun animation(): ValueAnimator {  \n            return ValueAnimator()  \n        }  \n  \n        override fun View.viewTransformations(progress: EnterTransitionRunning) {  \n            isVisible = true  \n            alpha = 1f  \n            translationX = 0f  \n            scaleX = 1f  \n        }  \n  \n        override fun glTransformations(  \n            transition: GlTransition,  \n            progress: EnterTransitionRunning,  \n            drawCallback: (matrix: FloatArray, alpha: Float) -> Unit  \n        ) {  \n            drawCallback(transition.mvpMatrix, 1f)  \n        }  \n    },\n```"},
		{"id":"2480ed7f491d93e8","x":4294,"y":1505,"width":762,"height":322,"type":"text","text":"### LocalDurationConfig\n```kotlin\ndata class IdeaPinOverlayBlockDurationConfig(  \n    @SerializedName(\"startTimeMs\")  \n    val startTimeMs: Long,  \n    @SerializedName(\"endTimeMs\")  \n    val endTimeMs: Long,  \n    @SerializedName(\"enterTransitionType\")  \n    val enterTransition: EnterTransition = EnterTransitionType.Instant,  \n    @SerializedName(\"exitTransitionType\")  \n    val exitTransition: ExitTransition = ExitTransitionType.Instant  \n)\n```"},
		{"id":"401c9314f9d87fe1","x":4294,"y":1879,"width":762,"height":322,"type":"text","text":"### ExportConfig\n```kotlin\ndata class IdeaPinVideoExportBitmapConfig(  \n    val bitmaps: List<BitmapFrame>,  \n    val matrix: Matrix,  \n    val coordSystemWidth: Float = 1f,  \n    val coordSystemHeight: Float = 1f,  \n    val startTimeUs: Long = 0,  \n    val endTimeUs: Long = 0,  \n    val enterTransition: EnterTransition = EnterTransitionType.Instant,  \n    val exitTransition: ExitTransition = ExitTransitionType.Instant  \n)\n```"},
		{"id":"c3a3425884520bb7","x":4294,"y":1232,"width":762,"height":215,"type":"text","text":"### OverlayTransitionConfig\n```kotlin\ndata class OverlayTransitionConfig(  \n    val overlayId: String,  \n    val enter: EnterOverlayTransition = EnterOverlayTransition.InstantTransition,  \n    val exit: ExitOverlayTransition = ExitOverlayTransition.InstantTransition  \n)\n```"},
		{"id":"bbf84ad0c26aafe8","x":5590,"y":1390,"width":551,"height":146,"type":"text","text":"### Type\nSimple enum to define various transitions, this is what we serialize and store"},
		{"id":"1f2b971640fe7009","x":5590,"y":1556,"width":551,"height":161,"type":"text","text":"### Spec\nInterface that defines the necesary functions to drive the animation end to end\n"},
		{"id":"90aba5889fac2cde","x":5590,"y":1737,"width":551,"height":142,"type":"text","text":"### Wrapper\nThis is a wrapper around the spec implementation because we need to add some more information in parts of the feature"},
		{"id":"f37f7ca93cada06d","x":419,"y":1664,"width":711,"height":305,"color":"3","type":"text","text":"### Reduce Code Change Footprint\n---\nRight now we have to touch a lot of files in order to add a new Transition, and it isn't clear which things are necessary. \n\nWe should try and reduce the amount of files needed to be changed by creating types that encapsulate all the necessary changes, especially when it comes to the animations. This can either be concretly by specifying the exact animation changes, or by creating descriptions / types that signify the values that need to be animated. The latter might be preferred for describing the Matrix transformations."},
		{"id":"add900bbd29f93a3","x":105,"y":2266,"width":486,"height":71,"color":"5","type":"text","text":"# Transition Selection"},
		{"id":"b967aad47b2d099e","x":-333,"y":2394,"width":711,"height":305,"color":"5","type":"text","text":"### Components\n---\nCommunication mechanism about which modal to load (enter or exit)\n\nTransitionModalState for the modal, which includes:\n- List of transitions\n- Selected transition\n- Modal type or label\n- Action handler?\n\nCommunication mechanism for how to update the selected transition in the OverlayDurationFragment\n- This could be by just updating the underlying local IdeaPin\n\nA way to signify which transition is currently selected?\n"},
		{"id":"8cdf4e8890866b56","x":459,"y":2394,"width":711,"height":305,"color":"5","type":"text","text":"### Showing Sticker in Transition Selection\n---\nIdeaPinSticker is the Model\nIt's stored on the current IdeaPinLocalPage\n"}
	],
	"edges":[
		{"id":"96589d701b39c2a7","fromNode":"457c70b556033d0e","fromSide":"bottom","toNode":"5885a4b3974f7b48","toSide":"top"},
		{"id":"478aa9144323518e","fromNode":"5885a4b3974f7b48","fromSide":"bottom","toNode":"ae9921263c75f722","toSide":"top"},
		{"id":"e5faaf94cc33317e","fromNode":"ae9921263c75f722","fromSide":"bottom","toNode":"79795b308f09b6e6","toSide":"top"},
		{"id":"cfed64aa507b4c3d","fromNode":"79795b308f09b6e6","fromSide":"bottom","toNode":"9ff128293889fccd","toSide":"top"},
		{"id":"73e8ac17e2f18433","fromNode":"9ff128293889fccd","fromSide":"bottom","toNode":"f52c78567ea22c1d","toSide":"top"},
		{"id":"f78e4cb9418dc8ac","fromNode":"f52c78567ea22c1d","fromSide":"bottom","toNode":"6c11452d9fe182b7","toSide":"top"},
		{"id":"156e4d8890ccb0a4","fromNode":"6c11452d9fe182b7","fromSide":"bottom","toNode":"2261fb882e2bc5a4","toSide":"top"}
	]
}